// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// generateSymmetricMatrix
arma::mat generateSymmetricMatrix(const arma::vec& offDiagonal, int n);
RcppExport SEXP _mvregrp_generateSymmetricMatrix(SEXP offDiagonalSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type offDiagonal(offDiagonalSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(generateSymmetricMatrix(offDiagonal, n));
    return rcpp_result_gen;
END_RCPP
}
// my_dmvnorm
double my_dmvnorm(arma::vec x, arma::mat Sigma);
RcppExport SEXP _mvregrp_my_dmvnorm(SEXP xSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(my_dmvnorm(x, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// calc_loglik
double calc_loglik(const arma::vec& sh_len_g1_indices, const arma::vec& sh_h_mapper, const arma::vec& z_sh_ind, const arma::vec& Zbeta, const arma::vec& VH_all, const double sigma2_v);
RcppExport SEXP _mvregrp_calc_loglik(SEXP sh_len_g1_indicesSEXP, SEXP sh_h_mapperSEXP, SEXP z_sh_indSEXP, SEXP ZbetaSEXP, SEXP VH_allSEXP, SEXP sigma2_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type sh_len_g1_indices(sh_len_g1_indicesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sh_h_mapper(sh_h_mapperSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z_sh_ind(z_sh_indSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Zbeta(ZbetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type VH_all(VH_allSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2_v(sigma2_vSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_loglik(sh_len_g1_indices, sh_h_mapper, z_sh_ind, Zbeta, VH_all, sigma2_v));
    return rcpp_result_gen;
END_RCPP
}
// update_VH_multi
void update_VH_multi(const arma::vec& sh_len_g1_indices, const arma::vec& hit_len, const arma::vec& sh_h_mapper, const arma::vec& z_sh_ind, const arma::vec& Zbeta, arma::vec& VH_all, const arma::vec& temp, const double sigma2_e_inv, const double sigma2_v_inv);
RcppExport SEXP _mvregrp_update_VH_multi(SEXP sh_len_g1_indicesSEXP, SEXP hit_lenSEXP, SEXP sh_h_mapperSEXP, SEXP z_sh_indSEXP, SEXP ZbetaSEXP, SEXP VH_allSEXP, SEXP tempSEXP, SEXP sigma2_e_invSEXP, SEXP sigma2_v_invSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type sh_len_g1_indices(sh_len_g1_indicesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hit_len(hit_lenSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sh_h_mapper(sh_h_mapperSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type z_sh_ind(z_sh_indSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Zbeta(ZbetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type VH_all(VH_allSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2_e_inv(sigma2_e_invSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2_v_inv(sigma2_v_invSEXP);
    update_VH_multi(sh_len_g1_indices, hit_len, sh_h_mapper, z_sh_ind, Zbeta, VH_all, temp, sigma2_e_inv, sigma2_v_inv);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mvregrp_generateSymmetricMatrix", (DL_FUNC) &_mvregrp_generateSymmetricMatrix, 2},
    {"_mvregrp_my_dmvnorm", (DL_FUNC) &_mvregrp_my_dmvnorm, 2},
    {"_mvregrp_calc_loglik", (DL_FUNC) &_mvregrp_calc_loglik, 6},
    {"_mvregrp_update_VH_multi", (DL_FUNC) &_mvregrp_update_VH_multi, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_mvregrp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
